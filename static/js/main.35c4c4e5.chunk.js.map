{"version":3,"sources":["components/InputSchemaViewer.js","components/SchemaImporterForm.js","components/SchemaImporter.js","constants/INPUT_SCHEMA.js","components/PropertyCard.js","components/PropertyForm.js","components/PropertyModal.js","components/GeneralForm.js","components/InputSchemaConfigurator.js","App.js","index.js"],"names":["Viewer","props","src","name","enableClipboard","displayObjectSize","theme","GENERAL_FIELDS","SchemaImporterForm","_getField","field","getFieldDecorator","form","Item","key","label","rules","required","message","initialValue","TextArea","placeholder","layout","map","this","React","Component","Form","create","SchemaImporter","handleOk","bind","closeModal","openModal","state","visible","setState","onClick","icon","title","onOk","onCancel","footer","type","formRef","validateFields","err","values","handleImport","JSON","resetFields","e","wrappedComponentRef","ref","Text","INPUT_CONFIGURATION_TYPES","general","fields","className","string","integer","boolean","object","array","PropertyCard","property","keyName","size","style","height","border","marginBottom","display","flexDirection","alignItems","Object","entries","value","handleEdit","propertyIndex","marginRight","block","handleDelete","PropertyForm","oldField","assign","config","valuePropName","stringify","getValueProps","includes","setPropertyValue","_getInputField","inputComponent","commonProps","onChange","event","val","Option","target","checked","persist","x","y","fieldConfigs","concat","sort","_requiredFirst","labelCol","xs","span","sm","wrapperCol","propertyModal","top","submit","finish","uniqueKey","editor","isEdit","handleUpdate","handleSave","properties","find","prop","error","isRequired","formReference","GeneralForm","Title","level","setStaticValue","description","InputSchemaConfigurator","_ensureValidStructure","filtered","forEach","parse","_createProperty","prevState","newModal","modal","_mockEmptyProperty","generate","_getJson","handleJsonChange","copyToClipboard","downloadFile","schemaVersion","_getUpdatedRequired","index","splice","updatedConfig","newJson","newConfig","newProperties","json","copy","propToEdit","fileDownload","modalProperty","AddNewButton","gutter","padding","justifyContent","i","length","marginTop","handleChange","PropertyModal","r","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35c4c4e5.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactJson from 'react-json-view'\n\nimport '../App.css';\n\n\nconst Viewer = (props)=>{\n    return  <ReactJson src={props.src} name={false} enableClipboard={false} displayObjectSize={false} theme={\"pop\"}/>\n}\n\nexport default Viewer\n","import React from \"react\";\nimport {Input, Form} from \"antd\";\n\nimport '../App.css';\n\nconst GENERAL_FIELDS = [\n    {\n        name: \"JSON\",\n        \"required\": true,\n    }\n];\n\nclass SchemaImporterForm extends React.Component {\n\n    _getField = (field) => {\n        const {getFieldDecorator} = this.props.form;\n\n        return (<Form.Item key={field.name} label={field.name}>\n                {getFieldDecorator(field.name, {\n                    rules: [{required: field.required, message: `Please input your ${field.name}!`}],\n                    initialValue: this.props[field.name]\n                })(\n                    <Input.TextArea placeholder={field.name} name={field.name}/>\n                )}\n            </Form.Item>\n        )\n    };\n\n    render() {\n        return (\n            <div>\n                <Form layout={\"vertical\"}>\n                    {GENERAL_FIELDS.map(this._getField)}\n                </Form>\n            </div>\n        )\n    }\n\n};\nexport default Form.create({name: 'schema-importer-form'})(SchemaImporterForm);\n","import React from \"react\";\nimport { Typography, Button, Modal} from \"antd\";\nimport SchemaImporterForm from \"./SchemaImporterForm\";\n\nimport '../App.css';\n\nclass SchemaImporter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleOk = this.handleOk.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.openModal = this.openModal.bind(this);\n        this.state = {\n            visible: false,\n            message: null\n        }\n    }\n\n    handleOk() {\n        this.setState({visible: false, message: null})\n    }\n\n    closeModal() {\n        this.handleOk();\n    }\n\n    openModal() {\n        this.setState({visible: true, message: null});\n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={this.openModal} icon={\"cloud-download\"}> IMPORT SCHEMA</Button>\n\n                <Modal\n                    title={\"Import existing input schema\"}\n                    visible={this.state.visible}\n                    onOk={this.handleOk}\n                    onCancel={this.closeModal}\n                    footer={[\n                        <Button key=\"back\" onClick={this.closeModal}>\n                            Back\n                        </Button>,\n                        <Button key=\"submit\" type=\"primary\" onClick={() => {\n                            const {form} = this.formRef.props;\n                            form.validateFields((err, values) => {\n                                if (err) {\n                                    return;\n                                }\n                                try {\n                                    this.props.handleImport(values.JSON);\n                                    form.resetFields();\n                                    this.closeModal()\n                                } catch (e) {\n                                    this.setState({message: e.message})\n                                }\n                            });\n                        }}>\n                            Save\n                        </Button>,\n                    ]}\n                >\n                    <SchemaImporterForm\n                        wrappedComponentRef={(ref) => {\n                            this.formRef = ref\n                        }}\n                    />\n                    {this.state.message && <Typography.Text type={\"danger\"}> {this.state.message}</Typography.Text>  }\n\n                </Modal>\n            </div>\n        )\n    }\n\n};\nexport default SchemaImporter;\n","const INPUT_CONFIGURATION_TYPES = {\n    general: {\n        fields: [\n            {\n                name: \"keyName\",\n                type: \"string\",\n                required: true,\n            },\n            {\n                name: \"title\",\n                type: \"string\",\n                required: true,\n                props:{\n                   className: \"title\"\n                }\n            },\n            {\n                name: \"type\",\n                values: [\"string\", \"integer\", \"boolean\", \"array\", \"object\"],\n                type: \"enum\",\n                required: true,\n            },\n            {\n                name: \"description\",\n                type: \"string\",\n                required: true,\n            },\n            {\n                name: \"default\",\n                type: \"type\",\n            },\n            {\n                name: \"sectionCaption\",\n                type: \"string\",\n            },\n            {\n                name: \"sectionDescription\",\n                type: \"string\",\n            },\n            {\n                name: \"required\",\n                type: \"boolean\",\n                required: true,\n            },\n        ]\n    },\n    string: {\n        fields: [\n            {\n                name: \"editor\",\n                values: [\"textfield\", \"json\", \"textarea\", \"javascript\", \"select\", \"hidden\"],\n                required: true,\n                type: \"enum\",\n            },\n            {\n                name: \"prefill\",\n                type: \"type\",\n            },\n            {\n                name: \"pattern\",\n                type: \"string\"\n            },\n            {\n                name: \"minLength\",\n                type: \"integer\",\n            },\n            {\n                name: \"maxLength\",\n                type: \"integer\"\n            },\n            {\n                name: \"enum\",\n                type: \"array\"\n            },\n            {\n                name: \"enumTitles\",\n                type: \"array\"\n            },\n            {\n                name: \"nullable\",\n                type: \"boolean\"\n            },\n        ]\n    },\n    integer:{\n        fields:[\n            {\n                name: \"editor\",\n                values: [\"number\", \"hidden\"],\n                type: \"enum\"\n            },\n            {\n                name: \"prefill\",\n                type: \"type\",\n            },\n            {\n                name:\"maximum\",\n                type: \"integer\",\n            },\n            {\n                name:\"minimum\",\n                type: \"integer\",\n            },\n            {\n                name:\"unit\",\n                type: \"string\",\n            },\n            {\n                name:\"nullable\",\n                type: \"boolean\",\n            }\n        ],\n    },\n    boolean:{\n        fields:[\n            {\n                name: \"editor\",\n                values: [\"checkbox\", \"hidden\"],\n                type: \"enum\"\n            },\n            {\n                name: \"groupCaption\",\n                type: \"string\"\n            },\n            {\n                name: \"groupDescription\",\n                type: \"string\"\n            },\n            {\n                name: \"nullable\",\n                type: \"boolean\"\n            }\n        ]\n    },\n    object:{\n        fields:[\n            {\n                name: \"editor\",\n                values: [\"json\",\"proxy\", \"hidden\"],\n                type: \"enum\",\n                required: true\n            },\n            {\n                name: \"prefill\",\n                type: \"type\",\n            },\n            {\n                name: \"patternKey\",\n                type: \"string\",\n            },\n            {\n                name: \"patternValue\",\n                type: \"string\",\n            },\n            {\n                name: \"maxProperties\",\n                type: \"integer\",\n            },\n            {\n                name: \"minProperties\",\n                type: \"integer\",\n            },\n            {\n                name: \"nullable\",\n                type: \"boolean\",\n            },\n        ]\n    },\n    array: {\n        fields:[\n            {\n                name: \"editor\",\n                values: [\"json\", \"requestListSources\", \"pseudoUrls\", \"keyValue\", \"stringList\", \"hidden\"],\n                type: \"enum\",\n                required: true,\n            },\n            {\n                name: \"prefill\",\n                type: \"type\",\n            },\n            {\n                name: \"placeholderKey\",\n                type: \"string\"\n            },\n            {\n                name: \"placeholderValue\",\n                type: \"string\"\n            }, {\n                name: \"patternKey\",\n                type: \"string\"\n            },\n            {\n                name: \"patternValue\",\n                type: \"string\"\n            },\n            {\n                name: \"maxItems\",\n                type: \"integer\"\n            },\n            {\n                name: \"minItems\",\n                type: \"integer\"\n            },\n            {\n                name: \"uniqueItems\",\n                type: \"boolean\"\n            },\n            {\n                name: \"nullable\",\n                type: \"boolean\"\n            },\n        ]\n    }\n\n};\nexport default INPUT_CONFIGURATION_TYPES\n","import React from \"react\";\nimport {Button, Card} from 'antd';\nimport '../App.css';\n\nconst PropertyCard = (props) => {\n    return (\n        <Card\n            title={props.property.keyName}\n            size={\"small\"}\n            style={{height: \"100%\", border: \"1px solid #1890ff\"}}\n        >\n            <div style={{height: \"100%\", marginBottom: \"12px\", display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\"}}>\n                {Object.entries(props.property).map(([key, value]) => {\n                    if (key === \"title\" || key === \"type\" || key === \"editor\")\n                        return (<div>{key}: {value}</div>)\n                })}\n            </div>\n\n\n            <div style={{height: \"100%\", display: \"flex\", flexDirection: \"row\", alignItems: \"flex-start\"}}>\n                <Button onClick={() => props.handleEdit(props.propertyIndex)} type={\"primary\"}\n                        style={{marginRight: \"16px\"}} icon={\"edit\"} block> EDIT</Button>\n                <Button onClick={() => props.handleDelete(props.propertyIndex)} type={\"danger\"} icon={\"delete\"} block> DELETE</Button>\n            </div>\n        </Card>\n    );\n};\n\nexport default PropertyCard\n\n","import React from \"react\";\nimport {Form, Input, InputNumber, Select, Checkbox} from 'antd';\nimport INPUT_CONFIGURATION_TYPES from \"../constants/INPUT_SCHEMA\";\n\nimport '../App.css';\n\nclass PropertyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setPropertyValue = this.setPropertyValue.bind(this);\n        this.state = {\n            ...props.property\n        }\n    }\n\n    setPropertyValue(event) {\n        let key;\n        let value;\n        if (event.persist) {\n            event.persist();\n            value = event.target.value;\n            key = event.target.name\n        } else {\n            key = event.key;\n            value = event.value\n        }\n        this.setState({[key]: value})\n    }\n\n    _getField = (oldField, type) => {\n        const {getFieldDecorator} = this.props.form;\n        const field = Object.assign({}, oldField);\n        const config = {\n            rules: [{required: field.required, message: `Please input your ${field.name}!`}],\n            initialValue: this.state[field.name]\n        };\n        if (field.type === \"type\") {\n            field.type = this.state.type;\n        }\n\n        if (field.type === \"boolean\") {\n            config.valuePropName = \"checked\";\n\n            if (field.required) {\n                config.rules = [{required: false}];\n\n            }\n        }\n\n        if (field.type === \"object\" || field.type === \"array\") {\n            config.initialValue = JSON.stringify(this.state[field.name], null, 2)\n        }\n\n        if (field.type === \"enum\") {\n            config.getValueProps = (value) => {\n                if (field.values.includes(value)) {\n                    return {value};\n                } else if (field.values.includes(this.state[field.name])) {\n                    return {value: this.state[field.name]}\n                }\n                this.setPropertyValue({value: field.values[0], key: field.name}); // a little bit dirty trick it could be done in state transitions function.\n            }\n        }\n\n\n        return (<Form.Item key={field.name} label={field.name} {...field.props}>\n                {getFieldDecorator(field.name, config)(\n                    this._getInputField(field)\n                )}\n            </Form.Item>\n        )\n    };\n\n    _getInputField = (field) => {\n        const commonProps = {\n            placeholder: field.name,\n            onChange: (event) => this.setPropertyValue(event),\n            name: field.name,\n        };\n        let inputComponent;\n\n\n        switch (field.type) {\n            case \"string\":\n                inputComponent = <Input\n                    {...commonProps}\n                />\n                break;\n            case \"integer\":\n                inputComponent = <InputNumber\n                    {...commonProps}\n                    onChange={(value) => this.setPropertyValue({\n                        key: field.name,\n                        value\n                    })\n                    }\n                />\n                break;\n            case \"enum\":\n                inputComponent = <Select\n                    {...commonProps}\n                    onChange={(value) => this.setPropertyValue({\n                        key: field.name,\n                        value\n                    })}>\n                    {field.values.map(val => (<Select.Option value={val} key={val}>{val}</Select.Option>))}\n                </Select>;\n                break;\n            case \"boolean\":\n                inputComponent = <Checkbox\n                    {...commonProps}\n                    onChange={(event) => this.setPropertyValue({\n                        key: field.name,\n                        value: event.target.checked\n                    })\n                    }\n                />;\n                break;\n            case \"object\":\n                inputComponent = <Input.TextArea\n                    {...commonProps}\n                />;\n                break;\n            case \"array\":\n                inputComponent = <Input.TextArea\n                    {...commonProps}\n                />\n                break;\n            default:\n                inputComponent = <p>null</p>\n        }\n        ;\n        return inputComponent\n    };\n\n    _requiredFirst(x, y) {\n        return (x.required === y.required) ? 0 : x.required ? -1 : 1;\n    }\n\n    render() {\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 8},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 16},\n            },\n        };\n        let fieldConfigs = INPUT_CONFIGURATION_TYPES.general.fields.concat(INPUT_CONFIGURATION_TYPES[this.state.type].fields);\n\n        //sort to have required field first\n        fieldConfigs = fieldConfigs.sort(this._requiredFirst);\n\n        return (\n            <Form {...formItemLayout}>\n                {fieldConfigs.map((field) => this._getField(field, this.state.type))}\n            </Form>\n        );\n    }\n}\n\nexport default Form.create({name: 'property-form'})(PropertyForm);\n\n","import {Modal, Button, message} from \"antd\";\nimport React from \"react\";\nimport PropertyForm from \"./PropertyForm\";\n\nimport '../App.css';\n\nconst propertyModal = (props) => {\n    let formRef;\n    const title = props.property.title || \"CREATING NEW PROPERTY\";\n\n    const saveFormRef = formReference => {\n        formRef = formReference;\n    };\n    return (\n        <Modal\n            title={title}\n            visible={props.visible}\n            onOk={props.handleOk}\n            onCancel={props.closeModal}\n            style={{ top: 20 }}\n            footer={[\n                <Button key=\"back\" onClick={props.closeModal}>\n                    Back\n                </Button>,\n                <Button key=\"submit\" type=\"primary\" onClick={() => {\n                    const {form} = formRef.props;\n                    form.validateFields((err, values) => {\n                        if (err) {\n                            return;\n                        }\n                        let submit;\n                        const finish = () => {\n                            values.uniqueKey = props.property.uniqueKey;\n                            values.editor = formRef.state.editor;\n\n                            submit(values, props.propertyIndex);\n                            form.resetFields();\n                            props.closeModal()\n                        };\n\n                        if (props.isEdit) {\n                            submit = props.handleUpdate;\n                            finish();\n                        } else {\n                            submit = props.handleSave;\n\n                            // ensure keyName is unique\n                            if (props.properties.find(prop => prop.keyName === values.keyName)) {\n                                message.error(`Property with keyName \"${values.keyName}\" already exist`)\n\n                            }else {\n                                finish();\n                            }\n\n                        }\n                    });\n                }}>\n                    Save\n                </Button>,\n            ]}\n        >\n            {props.visible && <PropertyForm\n                property={props.property}\n                isRequired={props.isRequired}\n                wrappedComponentRef={saveFormRef}\n            />}\n        </Modal>\n    )\n};\n\nexport default propertyModal\n","import React from \"react\";\nimport {Input, Form, Typography, InputNumber} from \"antd\";\n\nimport '../App.css';\n\nclass GeneralForm extends React.Component {\n\n    render() {\n\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 6},\n                sm: {span: 6},\n            },\n            wrapperCol: {\n                xs: {span: 12},\n                sm: {span: 12},\n            },\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <div className={\"metadata\"}>\n                <Typography.Title level={3}>\n                    Metadata\n                </Typography.Title>\n                <Form layout={\"vertical\"} {...formItemLayout}>\n                    <Form.Item key={\"title\"} label={\"Title\"}>\n                        {getFieldDecorator(\"title\", {\n                            rules: [{required: true, message: `Please input \"title\"!`}],\n                            initialValue: this.props.title\n                        })(\n                            <Input\n                                placeholder={\"title\"}\n                                name={\"title\"}\n                                onChange={this.props.setStaticValue}\n                            />\n                        )}\n                    </Form.Item>\n\n                    <Form.Item key={\"description\"} label={\"Description\"}>\n                        {getFieldDecorator(\"description\", {\n                            rules: [{required: false, message: `Please input \"description\"!`}],\n                            initialValue: this.props.description\n                        })(\n                            <Input.TextArea\n                                placeholder={\"description\"}\n                                name={\"description\"}\n                                onChange={this.props.setStaticValue}\n                            />\n                        )}\n                    </Form.Item>\n                </Form>\n            </div>\n        )\n    }\n\n};\nexport default Form.create({name: 'general-form'})(GeneralForm);\n","import React from 'react';\nimport {Typography, Row, Col, Button} from \"antd\";\nimport copy from 'clipboard-copy';\nimport {generate} from 'shortid';\nimport fileDownload from \"js-file-download\"\n\nimport Viewer from \"./InputSchemaViewer\"\nimport SchemaImporter from \"./SchemaImporter\";\n\n\nimport INPUT_CONFIGURATION_TYPES from \"../constants/INPUT_SCHEMA\";\nimport PropertyCard from \"./PropertyCard\";\nimport PropertyModal from \"./PropertyModal\";\nimport GeneralForm from \"./GeneralForm\";\n\nimport '../App.css';\n\n\nclass InputSchemaConfigurator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setStaticValue = this.setStaticValue.bind(this);\n        this._getJson = this._getJson.bind(this);\n        this.handleJsonChange = this.handleJsonChange.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.copyToClipboard = this.copyToClipboard.bind(this);\n        this.handleImport = this.handleImport.bind(this);\n        this.downloadFile = this.downloadFile.bind(this);\n        this.state = {\n            config: {\n                title: \"Actor input schema\",\n                description: \"This is actor input schema\",\n                schemaVersion: 1,\n                type: \"object\",\n                properties: [this._mockEmptyProperty()],\n                required: [],\n            },\n            modal: {\n                visible: false,\n                propertyIndex: null,\n            },\n            isEdit: false,\n        }\n\n    }\n\n    setStaticValue(event) {\n        let key;\n        let value;\n        if (event.persist) {\n            event.persist();\n            value = event.target.value;\n            key = event.target.name\n        } else {\n            key = event.key;\n            value = event.value\n        }\n        this.setState(prevState => {\n            const config = Object.assign({}, prevState.config);\n            config[key] = value;\n            return {config}\n\n        });\n    }\n\n    handleSave(prop) {\n        const property = this._ensureValidStructure(prop);\n        this.setState((prevState) => {\n            const config = Object.assign({}, prevState.config);\n            config.required = this._getUpdatedRequired(prevState, property);\n            config.properties = config.properties.concat([property]);\n\n            return {\n                config,\n            }\n        })\n    }\n\n    _getUpdatedRequired(prevState, property) {\n        let required = prevState.config.required.concat([]);\n        const index = required.find(key => key === property.keyName);\n        if (property.required && !index) {\n            return required.concat([property.keyName])\n\n        }\n\n        required.splice(index, 1);\n        return required\n\n\n    }\n\n    handleDelete(propertyIndex) {\n        this.setState((prevState) => {\n            const config = Object.assign({}, prevState.config);\n            config.properties.splice(propertyIndex, 1);\n            return {\n                config\n            }\n        })\n    }\n\n    handleUpdate(prop, index) {\n        const property = this._ensureValidStructure(prop);\n        this.setState(prevState => {\n            const updatedConfig = Object.assign({}, prevState.config);\n\n            updatedConfig.properties[index] = Object.assign({}, updatedConfig.properties[index], property);\n            updatedConfig.required = this._getUpdatedRequired(prevState, property);\n\n            return {\n                config: updatedConfig,\n                isEdit: false\n            }\n        })\n    }\n\n\n    closeModal() {\n        this.setState(prevState => {\n            const newModal = Object.assign({}, prevState.modal);\n            newModal.visible = false;\n            newModal.propertyIndex = -1;\n            return {\n                modal: newModal,\n                isEdit: false,\n            }\n        })\n    }\n\n    handleEdit(propertyIndex) {\n        this.setState({\n            modal: {\n                visible: true,\n                propertyIndex\n            },\n            isEdit: true\n        })\n    }\n\n    _ensureValidStructure = (property) => {\n        const fields = INPUT_CONFIGURATION_TYPES.general.fields.concat(INPUT_CONFIGURATION_TYPES[property.type].fields).concat([{name: \"uniqueKey\"}]);\n        const filtered = {};\n        fields.forEach(({type, name: key}) => {\n            let value = property[key];\n            const shouldParseJson = type === \"object\" || type === \"array\";\n\n            if (shouldParseJson && value) {\n                value = JSON.parse(property[key])\n            }\n\n            if (value || typeof property[key] === \"boolean\") {\n                filtered[key] = value\n            }\n        });\n\n        return filtered\n    };\n\n    handleJsonChange(newJson) {\n        this.setState(prevState => {\n            const newConfig = prevState.config;\n            const properties = Object.assign({}, newJson.properties);\n            delete newJson.properties;\n            Object.entries(newJson).forEach(([key, value]) => {\n                newConfig[key] = value\n            });\n            const newProperties = Object.entries(properties).map(([key, value]) => {\n                const property = Object.assign({}, value);\n                property.keyName = key;\n                property.uniqueKey = generate();\n                property.required = newConfig.required.includes(key);\n                return property\n            });\n            newConfig.properties = newProperties;\n            return {\n                config: newConfig,\n            }\n        })\n    }\n\n    handleImport(json) {\n        this.handleJsonChange(JSON.parse(json));\n    }\n\n    async copyToClipboard() {\n        await copy(JSON.stringify(this._getJson(), null, 2));\n    }\n\n    _getJson() {\n        const {config} = this.state;\n        const json = {\n            title: config.title,\n            description: config.description,\n            type: config.type,\n            schemaVersion: config.schemaVersion,\n            properties: {},\n            required: config.required\n        };\n        config.properties.forEach(prop => {\n            const propToEdit = Object.assign({}, prop);\n            const key = propToEdit.keyName;\n            delete propToEdit.keyName;\n            delete propToEdit.uniqueKey;\n            delete propToEdit.required;\n\n            json.properties[key] = propToEdit\n        });\n        return json\n    }\n\n    _createProperty = () => {\n        this.setState((prevState) => {\n            const newModal = Object.assign({}, prevState.modal);\n            newModal.visible = true;\n            return {\n                modal: newModal\n            }\n        })\n    };\n\n\n    _mockEmptyProperty = () => {\n        return {\n            \"title\": \"Country\",\n            \"type\": \"string\",\n            \"description\": \"Select your country\",\n            \"editor\": \"select\",\n            \"enum\": [\"us\", \"de\", \"fr\"],\n            \"enumTitles\": [\"USA\", \"Germany\", \"France\"],\n            \"keyName\": \"country\",\n            \"uniqueKey\": generate(),\n        }\n    };\n\n    downloadFile() {\n        fileDownload(JSON.stringify(this._getJson(), null, 2), 'INPUT_SCHEMA.json');\n\n    }\n\n    render() {\n        const {config, modal, isEdit} = this.state;\n        const modalProperty = config.properties[modal.propertyIndex] || {\"uniqueKey\": generate(), type: \"string\"};\n\n        const AddNewButton = (props) => (\n            <Button\n                type={\"primary\"}\n                onClick={this._createProperty}\n                style={{marginBottom: \"16px\"}}\n                icon={\"plus-circle\"}\n                block\n                {...props}\n            >\n                ADD NEW PROPERTY\n            </Button>\n        );\n\n        return (\n            <div>\n                <Row gutter={16}>\n                    <Col span={13} key={\"config\"} style={{padding: \"16px 20px 16px 30px\"}} className={\"scrollable\"}>\n                        <Typography.Title level={2}>\n                            Configure your input schema\n                        </Typography.Title>\n\n                        <GeneralForm {...config} setStaticValue={this.setStaticValue}/>\n                        <div className={\"properties\"}>\n                            <div\n                                style={{\n                                    display: \"flex\",\n                                    flexDirection: 'column',\n                                    justifyContent: \"space-between\",\n                                }}>\n                                <Typography.Title level={3}>\n                                    Properties\n                                </Typography.Title>\n                                <AddNewButton/>\n                            </div>\n                            <Row type=\"flex\" gutter={[16, 16]}>\n                                {config.properties.map((property, i) => {\n                                    const uniqueKey = property.uniqueKey;\n                                    return (<Col span={12} key={property.uniqueKey}>\n                                            <PropertyCard\n                                                property={property}\n                                                propertyIndex={i}\n                                                handleEdit={this.handleEdit}\n                                                handleDelete={this.handleDelete}\n                                                key={uniqueKey}\n                                            />\n                                        </Col>\n                                    )\n                                })}\n                            </Row>\n                            {this.state.config.properties.length >= 3 && <AddNewButton style={{marginTop: \"16px\"}}/>}\n                        </div>\n\n                    </Col>\n                    <Col span={11} key={\"viewer\"}\n                         className={\"scrollable json\"}\n                    >\n                        <Typography.Title level={2} className={\"white\"}>\n                            Input Schema JSON\n                        </Typography.Title>\n                        <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"16px\"}}>\n                            <Button onClick={this.copyToClipboard} type={\"primary\"} icon={\"copy\"}> COPY TO\n                                CLIPBOARD</Button>\n                            <Button onClick={this.downloadFile} icon={\"cloud-download\"}> DOWNLOAD</Button>\n                            <SchemaImporter handleImport={this.handleImport}/>\n                        </div>\n                        <div>\n                            <Viewer src={this._getJson()} handleChange={this.handleJsonChange}/>\n                        </div>\n\n                    </Col>\n                </Row>\n                <PropertyModal\n                    visible={modal.visible}\n                    property={modalProperty}\n                    isRequired={config.required.find(r => r === modalProperty.keyName)}\n                    closeModal={this.closeModal}\n                    handleSave={this.handleSave}\n                    propertyIndex={modal.propertyIndex}\n                    properties={config.properties}\n                    isEdit={isEdit}\n                    handleUpdate={this.handleUpdate}\n                />\n\n            </div>\n        )\n    }\n}\n\nexport default InputSchemaConfigurator;\n","import React from \"react\";\nimport {Row} from \"antd\";\nimport InputSchemaConfigurator from \"./components/InputSchemaConfigurator\";\nimport './App.css';\n\nclass App extends React.Component{\n\n    render() {\n      return  <div className=\"App\">\n            <Row>\n                <header className=\"App-header\">\n                    Input schema editor\n                </header>\n            </Row>\n          <InputSchemaConfigurator/>\n        </div>\n    }\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}